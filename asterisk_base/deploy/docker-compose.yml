# ************************************************************************************************
# KEEP THIS FILE UNCHANGED FOR SMOOTH UPGRADE. USE docker-compose.override.yml FOR YOUR CUSTOM ENV
# ************************************************************************************************
version: '3.2'
services:

  nginx:
    image: nginx
    # ports:
      # Open ports in docker-compose.override.yml
      # - 80:80
      # - 443:443
      # This is for production with nginx and separate server section for asterisk agent(s).
      # - 44444:44444 # JSON-RPC for Agents
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/proxy_headers.conf:/etc/nginx/proxy_headers.conf
      - ./nginx/certs/server.crt:/etc/nginx/server.crt
      - ./nginx/certs/server.key:/etc/nginx/server.key
      - ./nginx/htpasswd:/etc/nginx/htpasswd
      - ./nginx/ssl.conf:/etc/nginx/ssl.conf
    extra_hosts:
      # Let nginx resolve and start without these containers
      - odoo:${ODOO_IP}
      # **************************
      # For dev mode
      - asterisk:${ASTERISK_IP}
      # **************************
      # For production mode when asterisk is in network_mode: host.
      # - asterisk:${BRIDGE_IP}


  db:
    image: postgres:10-alpine
    restart: unless-stopped
    environment:
      - POSTGRES_USER=odoo
      - POSTGRES_PASSWORD=odoo
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - db12-data:/var/lib/postgresql/data/
    networks:
      default:
        ipv4_address: ${DB_IP}
    # For developers mode or other goals set in docker-compose.override.yml
    # ports:
    #  - 5432:5432

  odoo:
    build:
      context: ..
      dockerfile: ./deploy/odoo/Dockerfile
    restart: unless-stopped
    command: ["odoo", "-i", "web_notify,asterisk_base"]
    depends_on:
      - db
    volumes:
      - odoo12-data:/var/lib/odoo
    environment:
      - TZ=Europe/Amsterdam
      # For db dump via 
      - PGDATABASE=asterisk_base
      - PGHOST=db
      - PGPORT=5432
      - PGUSER=odoo
      - PGPASSWORD=odoo
    networks:
      default:
        ipv4_address: ${ODOO_IP}
    # ******************************
    # To access Odoo directly bypassing nginx uncomment this in your docker-compose.override.yml    
    # ports:
    #  - 8069:8069
    #  - 8072:8072
    extra_hosts:
      - db:${DB_IP}

  asterisk:
    build:
      dockerfile: asterisk/Dockerfile
      context: .
    restart: unless-stopped
    privileged: true # Required for IP_SECURITY feature
    environment:
      # Settings for manager.conf template
      - AMI_LISTEN_IP=127.0.0.1
      - AMI_LISTEN_PORT=5038
      - TZ=Europe/Amsterdam
      # Agent settings
      - DEBUG=0
      - ODOO_REGISTRATION_TOKEN=change-me
      - ODOO_DB=asterisk_base
      - ODOO_LOGIN=agent_test
      - ODOO_PASSWORD=agent_pass
      - ODOO_HOST=odoo
      - ODOO_PORT=8072
      - ODOO_RECONNECT_INTERVAL=1
      - HOSTNAME=localhost
      - DOWNLOAD_CONF_AT_START=1
      - MANAGER_HOST=127.0.0.1
      - MANAGER_PORT=5038
      - MANAGER_LOGIN=odoo
      - MANAGER_PASSWORD=odoo
      - MANAGER_RECONNECT_INTERVAL=1
      - AMI_EVENT_AGENT_CALLED=0
      - ASTERISK_CONF_DIR=/etc/asterisk
      - ASTERISK_SOUNDS_DIR=/var/lib/asterisk/sounds/
      - MONITOR_DIR=/var/spool/asterisk/monitor
      - REC_UPLOAD_DISABLED=0
      - REC_KEEP_AFTER_UPLOAD=0
      - REC_KEEP_FAILED=0
      - REC_UPLOAD_DELAY=5
      - ORIGINATE_CONTEXT=odoo-outgoing
      - ORIGINATE_TIMEOUT=60
      - ASTERISK_AGENT_SCRIPT=agent.py
      - IP_SECURITY_DISABLED=0
      - XTABLES_LIBDIR=/usr/lib/xtables
      # Console helper  
      - ASTERISK_BINARY=/usr/sbin/asterisk
      - CONSOLE_LISTEN_ADDRESS=0.0.0.0
      - CONSOLE_LISTEN_PORT=8010
      - CONSOLE_FROM_NGINX=0
    # **********
    # For developer mode, activate ports in docker-compose.override.yml like below:
    # networks:
    #   default:
    #     ipv4_address: ${ASTERISK_IP}
    #ports:
    #  - "5060:5060/udp" # SIP signalling for testing
    #  - "8010:8010" # Console helper      
    #  - "10000-10099:10000-10099/udp" # RTP range, set also in /etc/asterisk/rtp.conf
    # **********
    # For production mode, active network_mode: host in your docker-compose.override.yml like below:
    # network_mode: host


volumes:
  odoo12-data: {}
  db12-data: {}


networks:
  default:
    driver: bridge
    ipam:
      config:
        - subnet: ${SUBNET}
